# -*- coding: utf-8 -*-
"""GIFCA2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDkBXO6Sdx-9WyEVr33kjURq3aSP4fIe
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import contextily as ctx
import numpy as np
from shapely.geometry import Point
import imageio

# Función para convertir coordenadas DMS a grados decimales
def dms_to_dd(coord):
    parts = coord[:-1].split('°')
    degrees = float(parts[0])
    minutes, seconds = map(float, parts[1].split("'"))
    dd = degrees + minutes / 60 + seconds / 3600
    return dd

# Coordenadas de las estaciones
estaciones_data = {
    'Nombre': ['Usaquen', 'Carvajal - Sevillana', 'Tunal', "Centro de Alto Rendimiento", "Las Ferias", "Guaymaral",
               "Kennedy", "Suba", "Puente Aranda", "MinAmbiente", "San Cristobal", "Movil 7ma", "Bolivia",
               "Fontibon", "Usme", "Jazmin", "Ciudad Bolivar", "Colina", "Movil Fontibon"],
    'Longitud': ["74°1'49.50\"", "74°8'54.90\"", "74°7'51.44\"", "74°5'2.28\"", "74°4'56.94\"", "74°2'39.06\"",
                 "74°9'40.80\"", "74°5'36.46\"", "74°7'2.94\"", "74°4'1.13\"", "74°5'1.73\"", "74°5'2.28\"",
                 "74°7'33.18\"", "74°8'37.75\"", "74°7'1.7\"", "74°6'53.8\"", "74°9'58.6\"", "74°4'10.0\"",
                 "74°8'55.9\""],
    'Latitud': ["4°42'37.26\"", "4°35'44.22\"", "4°34'34.41\"", "4°39'30.48\"", "4°41'26.52\"", "4°47'1.52\"",
                "4°37'30.18\"", "4°45'40.49\"", "4°37'54.36\"", "4°37'31.75\"", "4°34'21.19\"", "4°38'32.75\"",
                "4°44'9.12\"", "4°40'41.67\"", "4°31'55.4\"", "4°36'30.6\"", "4°34'40.1\"", "4°44'14.1\"",
                "4°40'3.7\""]
}

# Convertir coordenadas DMS a decimal
estaciones_data['Longitud'] = [dms_to_dd(x) * -1 for x in estaciones_data['Longitud']]
estaciones_data['Latitud'] = [dms_to_dd(x) for x in estaciones_data['Latitud']]

# Crear geometría con shapely
estaciones_data['geometry'] = [Point(xy) for xy in zip(estaciones_data['Longitud'], estaciones_data['Latitud'])]

# Crear DataFrame
df_estaciones = pd.DataFrame(estaciones_data)

# Función principal para generar GIF
def generate_gif(df_air, df_met, pollutant, out_path):
    horas_disponibles = sorted(set(df_air['Hora'].dropna().unique()))
    if len(horas_disponibles) == 0:
        raise ValueError("No hay datos horarios disponibles.")

    tmp_folder = "frames_tmp"
    os.makedirs(tmp_folder, exist_ok=True)
    filenames = []

    for hora in horas_disponibles:
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.set_xlim([-74.25, -73.95])
        ax.set_ylim([4.5, 4.85])
        ctx.add_basemap(ax, crs='EPSG:4326', source=ctx.providers.CartoDB.Positron, alpha=1)

        df_hora = df_air[df_air['Hora'] == hora]
        df_met_hora = df_met[df_met['Hora'] == hora]

        for i, row in df_estaciones.iterrows():
            nombre = row['Nombre']
            aire_val = df_hora[df_hora['name'] == nombre]
            met_val = df_met_hora[df_met_hora['name'] == nombre]

            # Colores según concentración
            if not aire_val.empty and pollutant in aire_val.columns:
                val = aire_val[pollutant].values[0]
                if pd.isna(val):
                    continue
                color = 'green' if val < 50 else 'yellow' if val < 100 else 'red'
                circle = plt.Circle((row['Longitud'], row['Latitud']), 0.012, color=color, alpha=0.4)
                ax.add_patch(circle)

            # Viento
            if not met_val.empty:
                vel = met_val['Vel Viento'].values[0]
                dir_ = met_val['Dir Viento'].values[0]
                if dir_ != -9999 and vel != -9999:
                    ang = np.deg2rad(dir_)
                    dx = np.cos(ang) * 0.02
                    dy = np.sin(ang) * 0.02
                    ax.quiver(row['Longitud'], row['Latitud'], dx, dy, angles='xy', scale_units='xy', scale=1, color='black')
                    ax.text(row['Longitud'] + dx, row['Latitud'] + dy, f"{vel:.1f} m/s", fontsize=6, color='blue')

        ax.set_title(f"{pollutant} - {hora}")
        filename = f"{tmp_folder}/{hora.replace(':','-')}.png"
        fig.savefig(filename)
        filenames.append(filename)
        plt.close()

    images = [imageio.imread(fname) for fname in filenames]
    imageio.mimsave(out_path, images, fps=1)

    # Limpiar temporal
    for f in filenames:
        os.remove(f)
    os.rmdir(tmp_folder)

    return out_path, df_air